name: Create New Release
run-name: Create new release by @${{ github.actor }}

on:
  push:
    paths:
     - 'module.json'

jobs:
  buildRelease:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # get part of the tag after the `v`
      - name: Extract tag version number
        id: get_version
        uses: battila7/get-version-action@v2

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: "module.json"
        env:
          version: ${{steps.get_version.outputs.version-without-v}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip
          changelog: https://github.com/${{github.repository}}/blob/main/CHANGELOG.md
          readme: https://github.com/${{github.repository}}/blob/main/README.md

      # Use NPM to build the packs
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Build Packs
        run: npm run build

      # Create a zip file with all files required by the module to add to the release
      - run: zip -r ./${{github.repository}}.zip module.json LICENSE lang/ scripts/ images/

      # Create a release for this specific version
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.unpublished }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./module.json, ./${{github.repository}}.zip"
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
